#!/usr/bin/python2.4
#
# Script to read lists.csv into postgres tables
#
# Format of lists.csv:
# <list-id>,<list-name>,<list-description>,<memberid1>*<memberid2>*<memberid3>
# (multiple memberids, no constraint on number)
# list-id is a unique integer generated by Twitter to identify a list
# memberid is a unique number generated by Twitter to identify a member of a list
# NB skips the first line as it's just a header

import csv
import psycopg2


conn_string = "dbname='nlstudent' user = 'nlstudent' password ='2015pink'"

conn = psycopg2.connect(conn_string)
cursor = conn.cursor()

# check if list is in db - returns TRUE if not in db
def list_not_in_db(listi):
    try:
        cursor.execute("SELECT list_id FROM list_rec WHERE list_id = %s", (listi,))
        return cursor.fetchone() is None
    except psycopg2.Error as e:
        print('ERROR:', e[0])
        # conn.close()

# delete the list_rec for the given list_id
def delete_list_rec(listi):
    delete_list = "DELETE FROM list_rec WHERE list_id = %s;"
    try:
        cursor.execute(delete_list, [listi])
    except psycopg2.Error as e:
        print('ERROR delete_list_rec :', e[0])
    else:
        conn.commit()
        # print("deleted list_rec for ",listi)
        # conn.close()

def delete_list_member_rec(listi):
    delete_list_member = "DELETE FROM list_member_rec WHERE list_id = %s;"
    try:
        cursor.execute(delete_list_member, [listi])
    except psycopg2.Error as e:
        print('ERROR delete_list_member:', e[0])
        # conn.close()
    else:
        conn.commit()
        # print("deleted list_members for ",listi)

def store_list_rec(listi, listn, listd):
    store_list = """INSERT INTO list_rec(list_id,list_name,list_description)
                                VALUES (%s,%s,%s)"""
    try:
        cursor.execute(store_list, (listi, listn, listd))
    except psycopg2.Error as e:
        print('ERROR store_list:', e[0])
        # conn.close()
    else:
        conn.commit()

def store_list_member_rec(list_i, member_i):
    store_list_member = """INSERT INTO list_member_rec(list_id,member_id)
                                        VALUES (%s,%s)"""
    try:
        cursor.execute(store_list_member, (list_i, member_i))
        conn.commit()
    except psycopg2.Error as e:
        print('ERROR store_list_member:', e[0])
        # conn.close()
    else:
        conn.commit()

def print_db():
    read_all = """SELECT list_name,l.list_id,list_description,lm.member_id
       FROM list_rec AS l
       JOIN list_member_rec AS lm
       ON l.list_id = lm.list_id
       ORDER BY list_id ASC """
    cursor.execute(read_all)
    rows = cursor.fetchall()
    for record in rows:
        print(record)


def print_list():
    read_all = """SELECT list_name,list_description
        FROM list_rec"""
    cursor.execute(read_all)
    rows = cursor.fetchall()
    for record in rows:
        print(record)


# reader = csv.reader(open('lists.csv', 'rb'))
# reader.next()  # skip header row

# read list-member records, format [listname,'list description',[contents]] where contents can be multiple members
with open('datawithqoute', 'r') as csvfile:
    reader = csv.reader(csvfile, delimiter=',', quotechar="'")

    for row in reader:
<<<<<<< HEAD
        # print(row)
=======
>>>>>>> 5b05f2aa851744033c35e24b72435734e20cf1b9
        try:
            list_id = row[0]
            # print(list_id)
            list_name = row[1]
            list_name = list_name.strip()
            list_name = list_name.strip("'")
            # print(list_name)
            list_description = row[2]
            list_description = list_description.strip()
            list_description = list_description.strip("'")
            # print("description :",list_description)
            member_array = row[3]
        except IndexError:
                print ('IndexError')
                continue
            # print("member_array :",member_array)
<<<<<<< HEAD
        if list_id.isdigit():
            if list_not_in_db(list_id):
=======
        except IndexError as e:
            print("Index Error - going to next record")

        if list_not_in_db(list_id):
>>>>>>> 5b05f2aa851744033c35e24b72435734e20cf1b9
            # it's not in database so store this as a new list using the Twitter id as pk
            # print("not in db, storing...")
                store_list_rec(list_id, list_name, list_description)
            else:
            # delete list_rec and list_member_rec for this list_id
            # print("Deleting list ", list_id,"as this is a duplicate...")
                delete_list_member_rec(list_id)
                delete_list_rec(list_id)
        else:
            continue
        if list_not_in_db(list_id):# this is to replace the one just deleted
            # store the new list_rec
            store_list_rec(list_id, list_name, list_description)

        # parse members from member_array
        member_list = member_array.split('*')
        # print (member_list)

        for member_id in member_list:
            #remove any leading/trailing spaces
            member_id = member_id.strip()
            # add list_member_rec for this member_id,list_id
            if member_id.isdigit():  # member_id must be numeric
                # print("member_id :",member_id)
                store_list_member_rec(list_id,member_id)
            else: # member_id not an integer so delete  list and list_member
                print("Record not read in correctly - deleting :",list_id," ",member_id)
                delete_list_member_rec(list_id)
                delete_list_rec(list_id)
# conn.close()
